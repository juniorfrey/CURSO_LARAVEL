 php artisan migrate // Se hace la migración
 php artisan migrate:rollback // Reversar cambios en las migraciones
 php artisan make:migration add_avatar_to_cursos_table // Modificar una tabla sin eliminar los datos

// cambios en un campo de una tabla
Ejemplos:  $table->string('name', 150)->change();
Ejemplos:  $table->string('name', 150)->nullable->change();  // camnpo que acepta nulos.


<-- Models -->
Crear : php artisan make:model <Nombre modelo>
Ingresar datos a modelo con tinker
  Paso 1: php artisan tinker
  Paso 2: use\Models\ModeloEjemplo
  Paso 3: $modelo = new ModeloEjemplo;

  Acciones
  1 - Llenar objetos: 
      $ejemplo->nombre = 'Nombre 1';
      $ejemplo->edad = '15';

  2 - Ver información del objeto:
      $ejemplo;

  3 - Guardar la información almacenada en el objeto:
      $ejemplo->save(); // Se ejecuta el metodo save para guardar la información en la base de datos.

<-- Seeders -->
  comando: php artisan migrate:seed

<-- Factory -->
   comando: php artisan make:factory CursoFactory --model=Curso  // Se crea un factory
   Paso 2: Ejecutar un factory:
       archivo CursoSeeder.php // Archivo donde se utiliza
            public function run()
            {
                Curso::factory(50)->create();  // Indica que llenar la tabla curso con 50 registros con la estructura definida en el modelo.
            }

<-- Eloquent -->
   Querys: $curso = Curso::all(); // Todos los registros
           $curso = Curso::where('category','Diseño web')->get(); // Registros filtrados por el campo category
           $curso = Curso::where('category','Diseño web')->orderBy('id','desc')->get(); // Registros filtrados por el campo category y ordenado de manera descendente.
           $curso = Curso::where('category','Diseño web')->orderBy('id','desc')->first(); // Traer el primer registo.
           $curso = Curso::select('category','Diseño web')->get(); // Query para traer dos campos de la tabla.
           $curso = Curso::select('name','description')->orderBy('name', 'asc')->where('category','Diseño web')->get();  // Combinado sentencias.
           $curso = Curso::select('name as Title','description')->orderBy('name', 'asc')->where('category','Diseño web')->get();  // Colocando alias a los campos del select.
           $curso = Curso::select('name as Title','description')->orderBy('name', 'asc')->where('category','Diseño web')->take(5)->get();  // Con take especificamos la cantidad de registros que quiero traerme.
           $curso = Curso::find(5); // Metodo find.
           $curso = Curso::where('id','>',15)->get(); // Buscar registros con id mayor a 15;
           $curso = Curso::where('id','<>',15)->get(); // Buscar registros con id diferente a 15;
           $curso = Curso::where('name','like','% expedita %')->get(); // Busqueda con like.



    <-- Mutadores -->
          Paso 1: Importar -> use Illuminate\Database\Eloquent\Casts\Attribute;

          Paso 2: Definir el mutador por ejemplo para el campo name:
                   protected function name(): Attribute {
                        return new Attribute(
                             get:fn($value) => ucwords($value), // Función flecha de php
                            set: function ($value) {
                                return strtolower($value);
                            }
                        );
                    }
     
     <-- Listar registros -->
        compact($variable) // Función que se pasa a la vista para arrastrar la información de una variable, array etc.
        foreach --> blade
             @foreach ($cursos as $curso)
                <li>{{$curso->name}} - {{$curso->description}} - {{$curso->category}}</li>
            @endforeach
        Paginación laravel:
            {{$cursos->links()}}

    
    <-- Routes -->
    Route::get('cursos/',  'index')->name('cursos.index'); // la función name sirve para darle un identificador a la rutas al momento de llamarlas.

    <-- Validar campos vacio -->
     $Request->validate([
        'name'        => 'required|max:255', // Reglas de validación
        'description' => 'required|min:10',  // Reglas de validación
        'category'    => 'required' // Reglas de validación
    ]);